
<link rel="stylesheet/less" type="text/css" href="/styles/styles.less" />
<script type="text/javascript" src="/js/less.js"></script>
<script type="text/javascript" src="/js/ejs.js"></script>
<script type="text/javascript" src="/js/lodash.js"></script>


<script>
var view = {
    currentView:null,
    templateNames: ['newTweet','bottomContainer','streamButtonBox'],
    grabTemplates: function(cb){
        var grabIt=function(v){
            try {
                var newTemplate = new EJS({url: '/templates/'+v+'.ejs'});
                view.templates[v] = newTemplate;
                console.log('Grabbed template:'+v);
            } catch(err){
                console.log('Template load error:'+err);
            }
        }
        view.templateNames.forEach(grabIt);
        if (cb)
            return cb();
        else
            return
    },
    templates:{},
    control:{
        newTweet: function(){
            var newStatus = $('.textfield').val();

            socket.post('/tweet/create/',{status:newStatus},function newTweetCB(serverResponse){
            console.log('Posting New Tweet: ',serverResponse);
                if (serverResponse.error){
                    return console.log('Error:'+serverResponse.error)
                } else {
                    console.log('Posted:',serverResponse.response);
                        var addIt = things.add;
                        addIt('newTweet',serverResponse.response);
                        things.renderThing('newTweet');
                }
            })
        },
        startNewStream: function(){
            var newStreamFilter = $('.textfield').val();
            console.log('Stream Filter:',newStreamFilter)
            socket.post('/tweet/newStream/',{filter:newStreamFilter},function newStreamCB(serverResponse){
                var newStreamID = serverResponse.response;
                console.log('Starting New Stream with name: ',newStreamID);
                things.add('stream',{id_str:newStreamID});
                view.currentView = 'stream';
                view.control.loadBottom();
            })

        },
        eatStreamMessage: function(message){
//            var forStream = things.stream[message.forStream];
            things.stream[message.forStream][message.id_str] = message;
            console.log('eating this',message);
     //       if (view.currentView === 'stream')
                things.renderThing('stream',message.forStream)
        },
        getMyTweets: function(numberOfTweets){
            console.log('Getting',numberOfTweets,'tweets');
            socket.post('/tweet/find/',{user_id:'sailsTroll',limit:numberOfTweets},function getMyTweetsCB(serverResponse){
                if (serverResponse.error){
                    return console.log('Error:'+serverResponse.error)
                } else {

                    console.log('gotTweets:',serverResponse.response);

                    var renderTweet = function (tweetObject,index){
                        var addIt = things.add;
                        console.log('Trying to add Tweet',tweetObject.id_str)
                        addIt('newTweet',tweetObject);
                        if (index === serverResponse.response.length-1)
                            things.renderThing('newTweet')
                    }
                    serverResponse.response.forEach(renderTweet)

                }
            })
        },
        destroyTweet: function(){
            var tweetID = $(this).data('thing_id');
            console.log('Destroying tweet with ID: ',tweetID);

            var destroyTweetCB = function(serverResponse){
                var domID = tweetID;
                if (serverResponse.error){
                    return console.log('Error:'+serverResponse.error)
                } else {
                    console.log('MURDERED:',serverResponse.response);
                    things.remove('newTweet',domID);
                }
            };

            socket.post('/tweet/destroy/',{_id:tweetID}, destroyTweetCB )
        },
        loadBottom: function(){
            var streamNames = [];
            for (var s in things.stream)
                streamNames.push(things.stream[s].id_str)

            var streamButtonBox = view.templates.streamButtonBox.render({streams:streamNames})
            var theBottom = view.templates.bottomContainer.render({streamButtonBoxTemplate:streamButtonBox});
            $('.containerBottom').html(theBottom);
        }
    },
    bindEvents: function(){
        for (var k in view.events){
            try {
                var splitKey = k.split(' ');
                var eventName = splitKey[1];
                var jqSelector = splitKey[0];
                var executeThis = view.events[k];
                console.log('Loading Event for: '+k);
                $(document).on(eventName,jqSelector,executeThis);
            } catch (err){
                console.log('Problem binding event to '+k)
            }
        }
    }
}
view.events = {
        // jquerySelector nameOfEvent: view.control.customFunction
        ".deleteMe mouseup": view.control.destroyTweet
}

things = {
    add: function(thingType,theThing){
        var thingHolder = things[thingType];
        var domID = theThing.id_str;
        if (thingType === 'newTweet')
            thingHolder[domID] = theThing;
        else
            thingHolder[domID] = {};

        console.log('Added',thingType,domID)

/*        if (view.currentView === 'listView')
            $('.volSearchBox').trigger('input');
*/    },
    remove: function(thingType,theThingID){
        console.log('deleting',theThingID,'which is a ',thingType);
        var thingHolder = things[thingType];
        for (var k in thingHolder){
            if (thingHolder[k].id_str === theThingID){
                console.log('Found theThing.  Deleting')
                delete thingHolder[k];
                things.renderThing(thingType)
                break;
            } else {
                console.log(thingHolder[k].id,typeof thingHolder[k].id,'does not match',theThingID,typeof theThingID)
            }
        }
        // if (view.currentView === 'listView')
        //     $('.volSearchBox').trigger('input');
    },
    renderThing: function(thingType,whichThing){
        $('.containerTop').html('');

        switch (thingType){
            case 'newTweet':
                var allTweets = [];
                for (var k in things.newTweet)
                    allTweets.push(things.newTweet[k])

                while (allTweets.length){
                    var thisTweet = allTweets.pop();
                    var renderedThing = view.templates.newTweet.render(thisTweet);
                    $('.containerTop').append(renderedThing);

                }
            break;
            case 'stream':
                console.log('Rendering Stream',whichThing);

                var allTweets = [];
                for (var k in things.stream[whichThing])
                    allTweets.push(things.stream[whichThing][k])

                while (allTweets.length){
                    var thisTweet = allTweets.pop();
/*                    var renderedThing = view.templates.newTweet.render(thisTweet);
                    $('.containerTop').append(renderedThing);
*/
                    console.log(thisTweet)
                }

            break;
            default: break;
        }
    },
    newTweet:{},
    stream:{}
}
//things.stream['cat'] = {id_str:'ima cat'};
$(document).ready(drawApp);

function drawApp(){

    less.modifyVars({
        '@vWidth':'100%',
        '@vHeight':'100%'
    });
    view.grabTemplates(function(){
        view.bindEvents();
        view.control.getMyTweets(10);
        view.control.loadBottom();
        socket.on('streamMessage',view.control.eatStreamMessage)
    })
//    view.control.loadSignupView();
}
</script>


<div class="containerMain">
    <div class="containerTop">
    </div>
    <div class="containerBottom">
    </div>
</div>

